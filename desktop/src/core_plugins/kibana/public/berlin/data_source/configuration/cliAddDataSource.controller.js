// This file is automatically generated using pluto meta-file framework
// Please do not make any change in this file directly.

import _ from 'lodash';
class cliAddDataSourceCtrl {
  constructor($scope, StateService, $uibModalInstance) {

    $scope.editDataSource = false;
    $scope.dataObj = {};
    $scope.first_step = $uibModalInstance.first_step;
    $scope.second_step = $uibModalInstance.second_step;
    $scope.third_step = $uibModalInstance.third_step;
    $scope.index = $uibModalInstance.index;
    $scope.data = $uibModalInstance.data;







    $scope.credentialList = [];
    StateService.getSshCredentialNames().then(function (credentialList) {
      $scope.credentialList = credentialList;
      if (!$scope.editDataSource && credentialList.length > 0) {
        $scope.credential = credentialList[0];
      }
    });





    // if row is present then, edit modal function is called.
    if ($uibModalInstance.row) {
      $scope.editDataSource = true;

      $scope.name = $uibModalInstance.row.name;


      $scope.cli_target = $uibModalInstance.row.cli_target;


      $scope.cli_vendor = $uibModalInstance.row.cli_vendor;


      $scope.cli_device = $uibModalInstance.row.cli_device;


      $scope.credential = $uibModalInstance.row.credential;


      $scope.interval = 'minutes_15';
      $scope.dataReceived = $uibModalInstance.dataReceived;
    } else {



      $scope.name = '';






      $scope.cli_target = '0.0.0.0';






      $scope.cli_vendor = 'Others';






      $scope.cli_device = 'Others';






      $scope.credential = 'DUMMY';





      $scope.dataReceived = false;
      $scope.interval = 'minutes_15';
    }











    // Function called when Save&Continue button is clicked
    $scope.saveDataSource = (isValid) => {
      if(isValid) {
        // Create an object from current values..

        $scope.dataObj.name = $scope.name;


        $scope.dataObj.cli_target = $scope.cli_target;


        $scope.dataObj.cli_vendor = $scope.cli_vendor;


        $scope.dataObj.cli_device = $scope.cli_device;


        $scope.dataObj.credential = $scope.credential;





        // If row already exist, we need to figure out if something has really
        // changed
        if ($uibModalInstance.row) {
          StateService.updateDataSources('cli', $scope.name, $scope.dataObj).then(function () {
            $uibModalInstance.row.name = $scope.name;
            $uibModalInstance.row.cli_target = $scope.cli_target;
            $uibModalInstance.row.cli_vendor = $scope.cli_vendor;
            $uibModalInstance.row.cli_device = $scope.cli_device;
            $uibModalInstance.row.credential = $scope.credential;

            $uibModalInstance.data_receive_list.splice($uibModalInstance.data.indexOf($uibModalInstance.row), 1);
            $uibModalInstance.data = _.without($uibModalInstance.data, $uibModalInstance.row);
            $uibModalInstance.data.push($scope.dataObj);
            $uibModalInstance.data_receive_list.push(false);
            $scope.data_saved = true;

            $scope.first_step = false;
            $scope.second_step = true;

          });
        } else {
          // Normal add
          StateService.addDataSources('cli', $scope.name, $scope.dataObj).then(function () {
            $uibModalInstance.row = {};
            $uibModalInstance.row.name = $scope.name;
            $uibModalInstance.row.cli_target = $scope.cli_target;
            $uibModalInstance.row.cli_vendor = $scope.cli_vendor;
            $uibModalInstance.row.cli_device = $scope.cli_device;
            $uibModalInstance.row.credential = $scope.credential;

            $uibModalInstance.data.push($scope.dataObj);
            $uibModalInstance.data_receive_list.push(false);
            $scope.data_saved = true;

            $scope.first_step = false;
            $scope.second_step = true;

          });
        }
      }
    };

    // function called when clicked on 'cancel' button
    $scope.cancel = () => {
      $uibModalInstance.dismiss('cancel');
    };

    $scope.refreshDataSource = () => {
      // Make a query and get the data from backend based on interval

      StateService.refreshDataSouce('cli', $scope.name, $scope.cli_target, $scope.interval).then(function (data) {

        $scope.dataReceived = data.dataReceived;
      });
    };



    $scope.closeDataSource = () => {
      $uibModalInstance.close($scope.dataObj);
    };
  }
}

cliAddDataSourceCtrl.$inject = ['$scope', 'StateService', '$uibModalInstance'];
/*eslint-disable*/
export default cliAddDataSourceCtrl;
/*eslint-enable*/