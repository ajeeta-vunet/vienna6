// This file is automatically generated using pluto meta-file framework
// Please do not make any change in this file directly.
const  angular = require('angular');

import _ from 'lodash';
class logbeatAddDataSourceCtrl {
  constructor($scope, StateService, $uibModalInstance) {

    $scope.editDataSource = false;
    $scope.dataObj = {};
    $scope.first_step = $uibModalInstance.first_step;
    $scope.second_step = $uibModalInstance.second_step;
    $scope.third_step = $uibModalInstance.third_step;
    $scope.index = $uibModalInstance.index;
    $scope.data = $uibModalInstance.data;
    $scope.fourth_step = $uibModalInstance.fourth_step;









    // if row is present then, edit modal function is called.
    if ($uibModalInstance.row) {
      $scope.editDataSource = true;

      $scope.name = $uibModalInstance.row.name;


      $scope.port = $uibModalInstance.row.port;

      $scope.logbeat = angular.copy($uibModalInstance.row.logbeat);


      $scope.interval = 'minutes_15';
      $scope.dataReceived = $uibModalInstance.dataReceived;
    } else {



      $scope.name = '';






      $scope.port = '1024';






      $scope.logbeat = {};
      $scope.logbeat.log_file = [];








      $scope.dataReceived = false;
      $scope.interval = 'minutes_15';
    }












    $scope.new_log_file = [];
    $scope.add_log_file = () => {
      const newObj = {

        log_file_path: '',
        doc_type: 'log',




      };

      $scope.new_log_file.push(newObj);
    };

    $scope.delete_log_file = (row) => {
      $scope.logbeat.log_file = _.without($scope.logbeat.log_file, row);
    };

    $scope.delete_new_log_file = (row) => {
      $scope.new_log_file = _.without($scope.new_log_file, row);
    };









    // Function called when Save&Continue button is clicked
    $scope.saveDataSource = (isValid) => {
      if(isValid) {
        // Create an object from current values..

        $scope.dataObj.name = $scope.name;


        $scope.dataObj.port = $scope.port;




        $scope.dataObj.logbeat = {};
        $scope.dataObj.logbeat.log_file = $scope.logbeat.log_file = $scope.logbeat.log_file.concat($scope.new_log_file);












        $scope.new_log_file = [];








        // If row already exist, we need to figure out if something has really
        // changed
        if ($uibModalInstance.row) {
          StateService.updateDataSources('logbeat', $scope.name, $scope.dataObj).then(function () {
            $uibModalInstance.row.name = $scope.name;
            $uibModalInstance.row.port = $scope.port;
            $uibModalInstance.row.logbeat = $scope.logbeat;

            $uibModalInstance.data_receive_list.splice($uibModalInstance.data.indexOf($uibModalInstance.row), 1);
            $uibModalInstance.data = _.without($uibModalInstance.data, $uibModalInstance.row);
            $uibModalInstance.data.push($scope.dataObj);
            $uibModalInstance.data_receive_list.push(false);
            $scope.data_saved = true;
            $scope.third_step = true;
            $scope.second_step = false;

          });
        } else {
          // Normal add
          StateService.addDataSources('logbeat', $scope.name, $scope.dataObj).then(function () {
            $uibModalInstance.row = {};
            $uibModalInstance.row.name = $scope.name;
            $uibModalInstance.row.port = $scope.port;
            $uibModalInstance.row.logbeat = $scope.logbeat;

            $uibModalInstance.data.push($scope.dataObj);
            $uibModalInstance.data_receive_list.push(false);
            $scope.data_saved = true;
            $scope.third_step = true;
            $scope.second_step = false;

          });
        }
      }
    };

    // function called when clicked on 'cancel' button
    $scope.cancel = () => {
      $uibModalInstance.dismiss('cancel');
    };

    $scope.refreshDataSource = () => {
      // Make a query and get the data from backend based on interval
      StateService.refreshDataSouce('logbeat', $scope.name, '', $scope.interval).then(function (data) {

        $scope.dataReceived = data.dataReceived;
      });
    };

    $scope.downloadDataSourceAgentConfiguration = (environment) => {
      const dataObj = {};
      dataObj.name = $scope.name;
      dataObj.port = $scope.port;
      dataObj.logbeat = $scope.logbeat;

      StateService.downloadDataSourceAgentConfiguration('logbeat', $scope.name, environment, dataObj).then(function () {
      });
    };

    $scope.downloadDataSourceAgent = (environment) => {
      const dataObj = {};
      dataObj.name = $scope.name;
      dataObj.port = $scope.port;
      dataObj.logbeat = $scope.logbeat;

      StateService.downloadDataSourceAgent('logbeat', $scope.name, environment, dataObj).then(function () {
      });
    };



    $scope.closeDataSource = () => {
      $uibModalInstance.close($scope.dataObj);
    };
  }
}

logbeatAddDataSourceCtrl.$inject = ['$scope', 'StateService', '$uibModalInstance'];
/*eslint-disable*/
export default logbeatAddDataSourceCtrl;
/*eslint-enable*/
