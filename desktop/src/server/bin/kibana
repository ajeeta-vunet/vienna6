#!/usr/bin/env ruby
require "optparse"
require "pp"
require 'rubygems'
require 'puma/cli'
require "yaml"

HERE = File.expand_path(File.dirname(__FILE__))


# Defaults for the options
options = {
  :config => File.expand_path("#{HERE}/../config/kibana.yml")  || ENV["CONFIG_PATH"]
}

# Create a new parser
parser = OptionParser.new do |opts|
  opts.on('-e', '--elasticsearch URI', 'Elasticsearch instance') do |arg|
    options[:elasticsearch] = arg
  end
  opts.on('-c', '--config PATH', 'Path to config file') do |arg|
    options[:config] = arg
  end
  opts.on('-p', '--port PORT', 'Kibana port') do |arg|
    options[:port] = arg
  end
  opts.on('-v', '--version', 'Display version') do |arg|
    puts ENV['KIBANA_VERSION'] || 'dev-build'
    exit
  end
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end

# Set the usage banner
parser.banner = "Usage: kibana <options>\n\n"

# Parse the command line arguments
parser.parse! ARGV

# Load the config from default
config = YAML.load(IO.read(options[:config]))

# Set the override for the port
port = (options[:port] || config['port'])

# Set the override for Elasticsaerch
elasticsearch = (options[:elasticsearch] || config['elasticsearch'])

# Set the enviroment vars
ENV["KIBANA_PORT"] = port.to_s
ENV["KIBANA_CONFIG_FILE"] = options[:config]
ENV["KIBANA_ELASTICSEARCH"] = elasticsearch

# Clone argv and then clear it and set up the defaults for the Puma CLI
puma_args = ARGV.clone()
puma_args.clear
puma_args << '--port'
puma_args << port.to_s
puma_args << "#{HERE}/../config/web.ru"

# gem 'puma', version
# load Gem.bin_path('puma', 'puma', version)
#
cli = Puma::CLI.new puma_args
cli.run
