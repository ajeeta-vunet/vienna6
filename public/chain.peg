/*
 * Timelion syntax parser
 */

start
 = series+

arg_list
 = argument*

argument
 = arg_name:function_name '=' element:arg_type ','? space? {return {type: 'namedArg', name:arg_name, value:element}}
 / element:arg_type ','? space? {return element}

arg_type
 = series_type
 / number
 / string

series
 = series:series_type ','? space? { return series }

series_type
 = group
 / chain
 / reference

function_name // check
 = (first:[a-zA-Z]+ rest:[a-zA-Z0-9_-]* ) { return first.join('') + rest.join('') }

function "function"
 = name:function_name '(' space? arguments:arg_list space? ')' {
  var result = {
    type: 'function',
    function: name,
    arguments: arguments
  }
  return result;
 }

reference
 = plot:integer ':' series:integer {
  return {
   type: 'reference',
   plot: plot,
   series: series
  }
 }

chain 
 = func:function rest:chained_function* {
  return {type: 'chain', chain: [func].concat(rest)}
}

chained_function
 = '.' func:function {
  return func
 }

group
 = '(' space? grouped:series+ space? ')' functions:chained_function* {
  first = {
    type: 'chainList',
    list: grouped
  }
  first.label = text();

  return {type: "chain", chain: [first].concat(functions)};
 }

 /* ----- Core types ----- */

space
 = [\ \t]+

string "string"
  = '"' chars:dq_char* '"' { return chars.join(''); }
  / "'" chars:sq_char* "'" { return chars.join(''); }
  / string:[^()"'=\ \t]+ { return string.join(''); }

dq_char
  = [\x20-\x21\x23-\x5B\x5D-\u10FFFF] // everything except "
  / "\\" sequence:('"' / "\\") { return sequence; }

sq_char
  = [\x20-\x26\x28-\x5B\x5D-\u10FFFF] // everything except '
  / "\\" sequence:("'" / "\\") { return sequence; }

digit  = [0-9]

number
 = number:([-+]? integer '.'? integer?) {return parseFloat(number.join(''))}

integer
 = digits:digit+ {return parseInt(digits.join(''))}