/*
 * Timesheet syntax parser
 */

start
 = seriesList+

series
 = chain
 / queryAggOptional
 / reference

seriesList
 = series:series ';'? (space*)? { return series }

chain
 = '(' space? first:series space? ')' rest:chained_function* {
  first.label = text();
  return [first].concat(rest)
 }

chained_function
 = '.' func:function {
  return func
 }

function
 = (name:function_name '(' space? args:args? space? ')' space? ';'? space?) {
  return {
    type: 'function',
    function: name,
    arguments: args
  }
 }

function_name
 = (first:[a-zA-Z]+ rest:[a-zA-Z0-9]* ) { return first.join('') + rest.join('') }

args
 = argument+

argument
 = element:argType ','? (' '*)? {return element}

argType
 = series
 / function
 / number
 / string

reference
 = '@' plot:integer ':' series:integer {
  return {
   type: 'reference',
   plot: plot,
   series: series
  }
 }

// Only 26 columns supported for now
column
 = column:[A-Z]

number
 = number:(integer '.'? integer?) ','? (' '*)? {return parseFloat(number.join(''))}

integer
 = digits:DIGIT+ {return parseInt(digits.join(''))}

query
 = '`' q:[^`]* '`' {return q.join('')}

queryAggOptional
 = query:query agg:agg?
 {
  var obj = {query: query, type: 'query'}
  if (agg) {
   obj.field = agg.field;
   obj.metric = agg.metric;
  }
  return obj;
 }

agg
 = space 'as' space metric:metric ':' field:field
 {
  return {
   field: field,
   metric: metric
  }
 }

metric
 = metric:[a-z]+ { return metric.join('')}

field
 = field:[a-zA-Z0-9\-\_\.]+ {return field.join('')}

space
 = [\ \t]+

 /* ----- Strings, borrowed from the PEGJS JSON parser ----- */

string "string"
  = quotation_mark chars:char* quotation_mark { return chars.join(''); }

char
  = unescaped
  / escape
    sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$(HEXDIG HEXDIG HEXDIG HEXDIG) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }

escape         = "\\"
quotation_mark = '"'
unescaped      = [\x20-\x21\x23-\x5B\x5D-\u10FFFF]

/* ----- Core ABNF Rules ----- */

/* See RFC 4234, Appendix B (http://tools.ietf.org/html/rfc4627). */
DIGIT  = [0-9]
HEXDIG = [0-9a-f]i